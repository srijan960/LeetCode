class Solution {
    
    public static String LCS(String str1, String str2){
        int m = str1.length();
        int n = str2.length();
        
        int[][] dp = new int[m + 1][n + 1];
        
        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n; j++){
                if(str1.charAt(i - 1) == str2.charAt(j - 1)){
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                }
                else dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                
              //  System.out.print(dp[i][j]);
            }
            //System.out.println();
        }
        
        
        StringBuilder st = new StringBuilder();
        int i = m;
        int j = n;
        
        while(i > 0 && j > 0){
            if(str1.charAt(i - 1) == str2.charAt(j - 1)){
                st.append(str1.charAt(i - 1));
                i--;
                j--;
            }
            else{
                if(dp[i - 1][j] > dp[i][j - 1]){
                    st.append(str1.charAt(i - 1));
                    i--;
                }
                else {
                    st.append(str2.charAt(j - 1));
                    j--;
            }
        }}
            
            while(i > 0){
               st.append(str1.charAt(i - 1));
                i--;
            }
            while(j > 0){
                st.append(str2.charAt(j - 1));
                j--;
            }
            
        //System.out.println(st);
        st.reverse();
        return String.valueOf(st);
        
    }
    
    public String shortestCommonSupersequence(String str1, String str2) {
        
        
        String comm = LCS(str1, str2);
        
        return comm;
    }
}
