class Solution {
    public int closedIsland(int[][] grid) {
        
        int res = 0;
        
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == 0){
                    if(dfs(i, j, grid)){
                        res++;
                    }
                }
            }
        }
        
        return res;
    }
    
    public boolean dfs(int i, int j, int[][] grid){
        
        if(i < 0 || i > grid.length - 1 || j < 0 || j > grid[0].length - 1){
            return false;
        }
        
        if(grid[i][j] == 1){
            return true;
        }
        
        grid[i][j] = 1;
        
       boolean a = dfs(i + 1, j, grid);
       boolean b =  dfs(i - 1, j, grid);
       boolean c = dfs(i, j - 1, grid);
       boolean d =  dfs(i, j + 1, grid);
        
        return a & b & c & d;
        
        
    }
}
