class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
      HashSet<String> set = new HashSet<>();
        
        for(int i = 0; i < wordList.size(); i++){
            set.add(wordList.get(i));
        }
        
        if(!set.contains(endWord) || beginWord.equals(endWord)){
            return 0;
        }
        
        Queue<String> queue = new LinkedList<>();
        queue.add(beginWord);
        int level = 0;
        
        while(!queue.isEmpty()){
            level += 1;
            int qsize = 0;
            qsize = queue.size();
            while(qsize-- > 0){
                String curr = queue.poll();
                for(int i = 0; i < curr.length(); i++){
                    char[] word = curr.toCharArray();
                    for(char c = 'a'; c <= 'z'; c++){
                        word[i] = c;
                        String NewWord = new String(word);
                        if(NewWord.equals(endWord)){
                            return level + 1;
                        }
                        else if(set.contains(NewWord)){
                            queue.add(NewWord);
                            set.remove(NewWord);
                        }
                    }
                }
            }
        }
        return 0;
        
    }
}
