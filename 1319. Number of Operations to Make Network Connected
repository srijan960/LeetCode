class Solution {
    public int makeConnected(int n, int[][] connections) {
        
        if(connections.length < n - 1) return -1;
        
        ArrayList<Integer>[] graph = new ArrayList[n];
        
        for(int i = 0; i < n; i++)
            graph[i] = new ArrayList<>();
         
        for(int[] e : connections){
            graph[e[0]].add(e[1]);
            graph[e[1]].add(e[0]);
            }
        
        int components = 0;
        boolean[] visited = new boolean[n];
        
        for(int i = 0; i < n; i++){
            if(!visited[i]){
                components++;
                dfs(graph, visited, i);
            }    
        }
        
        
        return components - 1;
        
    }
    
    public static void dfs(ArrayList<Integer>[] graph, boolean[] visited, int i){
        if(visited[i]) return;
        
        visited[i] = true;
        
        for(int d : graph[i]){
            if(!visited[d]){
                dfs(graph, visited, d); 
            }
        }
    }
}
