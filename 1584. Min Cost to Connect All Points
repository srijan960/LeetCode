class Solution {
    static int[] parent ;
    public int minCostConnectPoints(int[][] points) {
        int n = points.length;
         parent = new int[n];
        for(int i = 0; i < n; i++){
            parent[i] = i;
        }
        
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> { return a[0] - b[0];});
        
        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j++){
                int dis = Math.abs(points[i][0] - points[j][0]) + Math.abs(points[i][1] - points[j][1]);
                pq.add(new int[]{dis, i, j});
            }
        }
        int edges = n;
        int ans = 0;
        
        while(!pq.isEmpty() && edges > 1){
            int[] curr = pq.poll();
            if(!union(curr[1], curr[2])){
                ans += curr[0];
                edges--;
            }
        }
        return ans;
    }
    
    public static boolean union(int i, int j){
        int findI = find(i);
        int findJ = find(j);
        
        if(findI == findJ) return true;
        else{
            parent[findI] = findJ;
            return false;
        }
    }
    
    public static int find(int i){
        while(i != parent[i]){
            parent[i] = parent[parent[i]];
            i = parent[i];
        }
        return i;
    }
}
