class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
       List<List<Integer>> res = new ArrayList<>();
        if(nums == null || nums.length == 0) return res;
        boolean[] visited = new boolean[nums.length];
        Arrays.sort(nums);
        helper(res, visited, nums , new ArrayList<>());
        return res;  
    }
    
    public static void helper(List<List<Integer>> res, boolean[] visited, int[] nums, List<Integer> list){
        
        if(list.size() == nums.length){
            res.add(new ArrayList<>(list));
            return;
        }
        
        for(int i = 0; i < nums.length; i++){
            if(visited[i]) continue;
            if(i > 0 && nums[i - 1] == nums[i] && !visited[i - 1]) continue;
            visited[i] = true;
            list.add(nums[i]);
            helper(res, visited, nums, list);
            list.remove(list.size() - 1);
            visited[i] = false;
        }
        
    }
}
