class Solution {
    public int findTargetSumWays(int[] nums, int S) {
        if(nums.length == 0 ) return 0;
        int sum = 0;
        int count = 0;
        
        for(int i = 0; i < nums.length; i++){
            sum += nums[i];
            if(nums[i] == 0) count++;
        }
        if(S > sum || ((S + sum) % 2 != 0))  return 0;
        
        int SubsetSum = (S + sum) / 2 ;
        
        int[][] dp = new int[nums.length + 1][SubsetSum + 1];
        
        for(int i = 0 ; i <= nums.length; i++){
            for(int j = 0; j <= SubsetSum; j++){
                if(i == 0 && j == 0){
                    dp[i][j] = 1;
                }
                else if(i == 0 && j != 0){
                    dp[i][j] = 0;
                }
                else if(j == 0 && i != 0){
                    dp[i][j] = 1;
                }
                else{
                    if(nums[i - 1] > j || nums[i - 1] == 0){
                        dp[i][j] = dp[i - 1][j];
                    }
                    else{
                        dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i - 1]];
                    }
                }
                
            }
        }
        System.out.println(dp[nums.length][SubsetSum]);
        return (int)Math.pow(2,count)*dp[nums.length][SubsetSum];
        
        
    }
}
