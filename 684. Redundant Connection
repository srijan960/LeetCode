class Solution {
    int[] parent;
    public int[] findRedundantConnection(int[][] edges) {
         parent = new int[edges.length + 1];
        
        for(int i = 0; i < parent.length; i++){
            parent[i] = i;
        }
        
        for(int i = 0; i < edges.length; i++){
            int v1 = edges[i][0];
            int v2 = edges[i][1];
            
            if(find(v1) == find(v2)) return new int[]{v1, v2};
            else union(v1, v2);
            
        }
        
        return null;
    }
    
    public int find(int i){
       
        while(i != parent[i]){
           parent[i] = parent[parent[i]];
           i = parent[i];
       }
        return i;
    }
    
    public  void union(int i, int j){
        int findI = find(i );
        int findJ = find(j);
        
        if(findI == findJ) return;
        parent[findI] = findJ; 
    }
                                
                              
                              
                              
                              
}
