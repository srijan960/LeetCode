class Solution {
    
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>> map = new TreeMap<>();
        helper(root,0,0,map);
        List<List<Integer>> res = new ArrayList<>();
        for(TreeMap<Integer,PriorityQueue<Integer>> e : map.values()){
            res.add(new ArrayList<>());
            for(PriorityQueue<Integer> y : e.values()){
                while(!y.isEmpty()){
                    res.get(res.size()-1).add(y.poll());
                }
            }
        }
        return res;
        
    }
    public void helper(TreeNode root,int col,int row, TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>> map){
        if(root == null) {
            return;
        }
        if (!map.containsKey(col)) {
            map.put(col, new TreeMap<>());
        }
        if(!map.get(col).containsKey(row)){
            map.get(col).put(row,new PriorityQueue<>());
        }
        map.get(col).get(row).offer(root.val);
        helper(root.left,col - 1, row + 1,map);
        helper(root.right,col + 1, row + 1,map);
        
    }
}
